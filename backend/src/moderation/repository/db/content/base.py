from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, List, Optional


@dataclass
class Content:
    user_id: str
    username: Optional[str]
    title: str
    body: str
    tags: List[str]
    localization: Optional[Dict[str, Any]]
    source: str
    # Generated by repository
    id: str | None = None
    status: str | None = None
    created_at: str | None = None
    updated_at: str | None = None
    # Generated by image store
    image_paths: List[str] | None = None
    document_paths: List[str] | None = None


@dataclass
class AnalysisResult:
    content_type: str
    automated_flag: bool
    automated_flag_reason: str
    model_version: str
    analysis_metadata: Dict[str, Any]
    filename: str | None = None


@dataclass
class ContentWithAnalysis:
    id: str | None
    body: str
    tags: List[str]
    localization: dict | None
    source: str
    status: str | None
    results: List[AnalysisResult]
    created_at: str | None = None


def content_with_analysis(content: Content, results: List[AnalysisResult]) -> ContentWithAnalysis:
    """Combine content and analysis results into a single object."""
    return ContentWithAnalysis(
        id=content.id,
        body=content.body,
        tags=content.tags,
        localization=content.localization,
        source=content.source,
        status=content.status,
        created_at=content.created_at,
        results=[
            AnalysisResult(
                content_type=result.content_type,
                automated_flag=result.automated_flag,
                automated_flag_reason=result.automated_flag_reason,
                model_version=result.model_version,
                analysis_metadata=result.analysis_metadata,
                filename=result.filename,
            )
            for result in results
        ],
    )


class AbstractDBContentRepository(ABC):

    @abstractmethod
    def list(self, status: str | None = None, offset: int = 0, limit: int = 10) -> List[Content]:
        """List all content."""

    @abstractmethod
    def list_with_analysis(
        self, status: str | None = None, offset: int = 0, limit: int = 10
    ) -> List[ContentWithAnalysis]:
        """List all content."""

    @abstractmethod
    def get_by_id(self, content_id: str) -> Optional[Content]:
        """Get content by ID."""

    @abstractmethod
    def create(self, content: Content) -> Content:
        """Create new content."""

    @abstractmethod
    def update(self, content_id: str, data: Dict[str, Any]) -> Optional[Content]:
        """Update content properties."""

    @abstractmethod
    def update_status(self, content_id: str, status: str) -> Optional[Content]:
        """Update content moderation status."""

    @abstractmethod
    def delete(self, content_id: str) -> bool:
        """Delete content by ID."""

    @abstractmethod
    def count(self, **criterion: dict) -> int:
        """Count content by criteria."""
