from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, List, Optional


@dataclass
class Content:
    user_id: str
    username: Optional[str]
    title: str
    body: str
    tags: List[str]
    localization: Optional[Dict[str, Any]]
    source: str
    # Generated by repository
    id: str | None = None
    status: str | None = None
    created_at: str | None = None
    updated_at: str | None = None
    # Generated by image store
    image_paths: List[str] | None = None


class AbstractDBContentRepository(ABC):

    @abstractmethod
    def list(self, status: str) -> List[Content]:
        """List all content."""

    @abstractmethod
    def get_by_id(self, content_id: str) -> Optional[Content]:
        """Get content by ID."""

    @abstractmethod
    def create(self, content: Content) -> Content:
        """Create new content."""

    @abstractmethod
    def update(self, content_id: str, data: Dict[str, Any]) -> Optional[Content]:
        """Update content properties."""

    @abstractmethod
    def update_status(self, content_id: str, status: str) -> Optional[Content]:
        """Update content moderation status."""

    @abstractmethod
    def delete(self, content_id: str) -> bool:
        """Delete content by ID."""
